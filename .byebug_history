c
admin_owner_path(id: user.id)
c
User.find_by(id: user.id)
user.id
user
c
current_user
c
User.find(@token['user_id'])
User.find(@token[user_id])
User.find(@token(user_id))
User.find(@token.id)
User.find(@token)
User.find!(@token)
User.find(@token)
User.find(@token.id)
c
JsonWebToken.decode(token)
token
n
request.headers[:token]
c
User.find(JsonWebToken.decode(token))
User.find_by!(user: JsonWebToken.decode(token))
User.find_by!(token: JsonWebToken.decode(token))
User.find_by(token: JsonWebToken.decode(token))
n
request.headers[:token]
params[:token]
token
params
c
user_params
usser_params
c
@user
n
user_params
c
user_params
c
user_params
c
@user.save!
@user.save
n
c
@user.save!
@user.save
n
c
@user.save!
@user.save
@user
n
user_params
c
User.new(user_params)
user_params
c
user_params
c
user_params
c
User.find(JsonWebToken.decode(token))
User.find(JsonWebToken.decode(token)
User.find(JsonWebToken.decode(request.headers[:token]))
User.find_by(user_id: JsonWebToken.decode(request.headers[:token]))
User.find_by(token: JsonWebToken.decode(request.headers[:token]))
User
n
token = request.headers[:token] || params[:token]
c
n
c
n
tokenn
token
n
c
n
c
token
toke
n
c
User.find(token)
User.find(token.id)
token.id
n
c
User.find_by(authentication_token: token)
User.all
n
c
User.find_for_database_authentication(authentication_token: token)
token
n
request.headers[:token]
params[:token]
c
headerc
header
header\
Authorization
c
@user&.authenticate(params[:password])
@user
n
User.find_by_email(params[:email])
c
User.find_by(email: params[:email])c
User.find_by(email: params[:email])
User.find_by_email(params[:email])
params[:email]
User.find_by_email(params[:email])
c
User.pluck(:id, :role)
User.pluck(:id)
params
c
User.owner.find(params[:id])
c
User.owner.find(params[:id]).update(role: params[:user][:role])
User.owner
params
c
nc
n
c
redirect_to admin_owner_path(id: 20)
redirect_to admin_owner_path(20)
redirect_to admin_owner_path(id: 20)
redirect_to admin_owner_path(id: params[:id])
params[:id]
params
paramd
owner
owner.id
n
owner.id
c
user.id
n
c
params[:id]
user.id
c
User.last.id
c
user.last
User.last.id
User.last
User
params
super
user.id
c
user.id
c
params
user_id
user_is
user.id
User.all
user_params
c
user_params
User.create!(user_params.merge(password: "#{user_params[:name]}@123"))
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
params[:id]
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create!(user_params.merge(password: "#{user_params[:name]}@123"))
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
params[:user]
params[:user][:id]
params[:id]
id
user.id
params[:id]
c
params.require(:user).permit(:name, :username, :email, :role)
Cparams.require(:user).permit(:name, :username, :email, :role)
c
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User.create(params.merge(password: "#{params[:user][:name]}@123"))
params
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password = "#{params[:user][:name]}@123")
params[:user].merge(params[:user][:password].to_h = "#{params[:user][:name]}@123")
params[:user].merge(params[:user][:password] = "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:user][:name]}@123")
c
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User.create(params[:user].merge(password: "#{params[:user][:name]}@123", password_confirmation: "#{params[:user][:name]}@123"))
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params[:user][:name]
c
a = params[:user].merge(params[:user][:password]  "#{params[:user][:name]}@123")
a = params[:user].merge(params[:user][:password]: "#{params[:user][:name]}@123")
a = params[:user].merge(password: "#{params[:name]}@123")
params
a
User.create(a)
a
a = params[:user].merge(password: "#{params[:user][:name]}@123")
params
User.create!(params[:user].merge(password: "#{params[:user][:name]}@123"))
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user]
c
params[:user].merge(password: "1234")
params[:user].merge[password: "1234"])
params[:user].merge[password: "1234")
params[:user]
user[:params]
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params
prams
user
user[:params]
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123")0
user = params[:user].merge(password: "#{params[:user][:name]}@123")
user
user.save
user.save!
user = params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:name]}@123")
params[:user].merge(password: "#{params[:name]}"
params[:user]
params
c
params
c
parmas
exit
a = "#{params[:user][:name]}@123"
params[:user][:name] = "nil"
a = "#{}@123"
