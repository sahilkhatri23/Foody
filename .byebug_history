c
User.pluck(:id, :role)
User.pluck(:id)
params
c
User.owner.find(params[:id])
c
User.owner.find(params[:id]).update(role: params[:user][:role])
User.owner
params
c
nc
n
c
redirect_to admin_owner_path(id: 20)
redirect_to admin_owner_path(20)
redirect_to admin_owner_path(id: 20)
redirect_to admin_owner_path(id: params[:id])
params[:id]
params
paramd
owner
owner.id
n
owner.id
c
user.id
n
c
params[:id]
user.id
c
User.last.id
c
user.last
User.last.id
User.last
User
params
super
user.id
c
user.id
c
params
user_id
user_is
user.id
User.all
user_params
c
user_params
User.create!(user_params.merge(password: "#{user_params[:name]}@123"))
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
params[:id]
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
c
User.create!(user_params.merge(password: "#{user_params[:name]}@123"))
User.create(user_params.merge(password: "#{user_params[:name]}@123"))
user_params = params.require(:user).permit(:name, :username, :email, :role)
params[:user]
params[:user][:id]
params[:id]
id
user.id
params[:id]
c
params.require(:user).permit(:name, :username, :email, :role)
Cparams.require(:user).permit(:name, :username, :email, :role)
c
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User.create(params.merge(password: "#{params[:user][:name]}@123"))
params
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password = "#{params[:user][:name]}@123")
params[:user].merge(params[:user][:password].to_h = "#{params[:user][:name]}@123")
params[:user].merge(params[:user][:password] = "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:user][:name]}@123")
c
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
User.create(params[:user].merge(password: "#{params[:user][:name]}@123", password_confirmation: "#{params[:user][:name]}@123"))
User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params[:user][:name]
c
a = params[:user].merge(params[:user][:password]  "#{params[:user][:name]}@123")
a = params[:user].merge(params[:user][:password]: "#{params[:user][:name]}@123")
a = params[:user].merge(password: "#{params[:name]}@123")
params
a
User.create(a)
a
a = params[:user].merge(password: "#{params[:user][:name]}@123")
params
User.create!(params[:user].merge(password: "#{params[:user][:name]}@123"))
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user]
c
params[:user].merge(password: "1234")
params[:user].merge[password: "1234"])
params[:user].merge[password: "1234")
params[:user]
user[:params]
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
params
prams
user
user[:params]
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123"))
user = User.create(params[:user].merge(password: "#{params[:user][:name]}@123")0
user = params[:user].merge(password: "#{params[:user][:name]}@123")
user
user.save
user.save!
user = params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:user][:name]}@123")
params[:user].merge(password: "#{params[:name]}@123")
params[:user].merge(password: "#{params[:name]}"
params[:user]
params
c
params
c
parmas
exit
a = "#{params[:user][:name]}@123"
params[:user][:name] = "nil"
a = "#{}@123"
a = "#{params[:user][:name]}@123"
params[:user][:name]
params[:name]
params
c
a
a = "#{params[:user][:name]}@123"
params[:user][:name]
params[:name]
c
params[:user][:name]
params[:user][:nam]
params
params[:name]
c
exit
User.create!(params[:user])
params[:user]
User.create!(params[:user])
params[:user]
params
user
User.create!(user)
User.create(user)
User.create!(user)
params[:user]
params
c
User.owner.find_by(id: params[:id]).update(role: params[:user][:role])
User.owner.find_by(id: params[:id]).update!(role: params[:user][:role])
User.owner.where(id: params[:id]).update!(role: params[:user][:role])
User.owner.where(id: params[:id]).update(role: params[:user][:role])
User.owner.where(id: params[:id])
params[:id]
params
User.owner
User
c
params
params[:user][:role]
params[:user]
params[:role]
User.owner
c
User.owner.where(id: params[:id]).update(role: params[:user][:role])
User.owner.where(id: params[:id])
params[:id]
User.owner.where(id: params[:user][:id])
User.owner
c
n
User.owner
c
User.owner.where(email: params[:user][:email]).update(role: params[:user][:role])
User.owner.where(email: params[:user][:email])
params[:user]
User.owner
User
User.owner
obj
object
params[:user][:role]
c
params[:user][:role]
params[:user]
params[:role]
params
params[:role]
c
User.all.map{ |c| [c.role, c.id]}
User.all.map{ |c| c.role, c.id  }
User.all.map({ |c| c.role, c.id  })
User.all
User.all.map { |c| c.role, c.id }
User.all.map { |c| c.role, c.id  }
c
params
User.owner
c
User.owner
User
current_admin_user
c
self.owner
self
User.owner.count
User.owner
User.owner\
c
account
n
c
panel :owners do
n
owners
n
user.role == 'owner'
user.owner?
user.ownert
user
row :email
row :name
n
c
User.find_by_email(params[:email])
c
n
JsonWebToken.encode(user_id: @user.id)
n
@user&.authenticate(params[:password])
n
User.find_by_email(params[:email])
c
JsonWebToken
@user.id
JsonWebToken.encode(user_id: @user.id)
n
